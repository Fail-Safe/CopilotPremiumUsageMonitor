name: VS Code Version Review Reminder

permissions:
  contents: read
  issues: write

on:
  schedule:
    # First day of each month at 13:00 UTC
    - cron: '0 13 1 * *'
  workflow_dispatch: {}

concurrency:
  group: vscode-version-review
  cancel-in-progress: false

jobs:
  remind:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Extract pinned VS Code version
        id: pin
        run: |
          PINNED=$(grep -E 'VSCODE_VERSION:\s*[0-9]+' .github/workflows/ci.yml | head -n1 | sed -E 's/.*VSCODE_VERSION:\s*([0-9.]+).*/\1/')
          if [ -z "$PINNED" ]; then
            echo "Failed to extract pinned version" >&2
            PINNED="(not found)"
          fi
          echo "pinned=$PINNED" >> $GITHUB_OUTPUT

      - name: Fetch latest stable VS Code version
        id: latest
        run: |
          # VS Code provides a productVersions JSON; fallback if curl/jq fails
          set -e
          URL="https://update.code.visualstudio.com/api/releases/stable"
          RAW=$(curl -sL "$URL" || true)
          # Expect list of version strings, pick the last (most recent)
          if command -v jq >/dev/null 2>&1; then
            LATEST=$(echo "$RAW" | jq -r '.[-1]' 2>/dev/null || true)
          fi
          if [ -z "$LATEST" ] || [ "$LATEST" = "null" ]; then
            # Fallback heuristic: grep version-like patterns
            LATEST=$(echo "$RAW" | grep -Eo '1\\.[0-9]{2,3}\\.[0-9]+' | sort -V | tail -n1)
          fi
            
          if [ -z "$LATEST" ]; then
            LATEST="(unresolved)"
          fi
          echo "latest=$LATEST" >> $GITHUB_OUTPUT

      - name: Open / Update reminder issue
        uses: actions/github-script@v7
        with:
          script: |
            const pinned = process.env.PINNED;
            const latest = process.env.LATEST;
            const title = 'Maintenance: Review pinned VS Code test version';
            const body = `Automated reminder to review the pinned VS Code integration test version.\n\nCurrently pinned in ci.yml: **${pinned}**\nLatest stable (best-effort fetch): **${latest}**\n\nActions to consider:\n- If major/minor advanced, evaluate upgrading tests.\n- Run full test matrix locally after bump.\n- Adjust any API changes / codicon updates.\n\n(Generated monthly. Close if not needed; it will be recreated next cycle.)`;
            // Search for existing open issue with same title
            const issues = await github.paginate(github.rest.issues.listForRepo, { owner: context.repo.owner, repo: context.repo.repo, state: 'open', per_page: 100 });
            const existing = issues.find(i => i.title === title);
            if (existing) {
              // Update body if changed
              if (existing.body !== body) {
                await github.rest.issues.update({ owner: context.repo.owner, repo: context.repo.repo, issue_number: existing.number, body });
              }
              core.info(`Updated existing issue #${existing.number}`);
            } else {
              const created = await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title, body, labels: ['maintenance'] });
              core.info(`Created issue #${created.data.number}`);
            }
        env:
          PINNED: ${{ steps.pin.outputs.pinned }}
          LATEST: ${{ steps.latest.outputs.latest }}
