{
  "name": "copilot-premium-usage-monitor",
  "displayName": "Copilot Premium Usage Monitor",
  "description": "Monitor usage and budget for Copilot Premium Request SKU from VS Code.",
  "version": "0.4.2",
  "publisher": "fail-safe",
  "license": "MIT",
  "icon": "media/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/Fail-Safe/CopilotPremiumUsageMonitor"
  },
  "bugs": {
    "url": "https://github.com/Fail-Safe/CopilotPremiumUsageMonitor/issues"
  },
  "homepage": "https://github.com/Fail-Safe/CopilotPremiumUsageMonitor#readme",
  "keywords": [
    "copilot",
    "github",
    "usage",
    "budget",
    "billing",
    "monitor",
    "statusbar",
    "premium"
  ],
  "extensionKind": [
    "ui"
  ],
  "galleryBanner": {
    "color": "#1f2428",
    "theme": "dark"
  },
  "engines": {
    "vscode": "^1.86.0",
    "node": ">=20.0.0"
  },
  "categories": [
    "Other"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "copilotPremiumUsageMonitor.openPanel",
        "title": "Copilot Premium Usage Monitor: Open"
      },
      {
        "command": "copilotPremiumUsageMonitor.signIn",
        "title": "Copilot Premium Usage Monitor: Sign in to GitHub"
      },
      {
        "command": "copilotPremiumUsageMonitor.configureOrg",
        "title": "Copilot Premium Usage Monitor: Choose Organization"
      },
      {
        "command": "copilotPremiumUsageMonitor.enableFirstRunNotice",
        "title": "Copilot Premium Usage Monitor: Re-enable First-run Tip"
      },
      {
        "command": "copilotPremiumUsageMonitor.manage",
        "title": "Copilot Premium Usage Monitor: Manage"
      },
      {
        "command": "copilotPremiumUsageMonitor.showLogs",
        "title": "Copilot Premium Usage Monitor: Show Logs"
      }
    ],
    "configuration": {
      "title": "Copilot Premium Usage Monitor",
      "properties": {
        "copilotPremiumUsageMonitor.warnAtPercent": {
          "type": "number",
          "default": 80,
          "minimum": 1,
          "maximum": 100,
          "description": "Warn color threshold (percent used)."
        },
        "copilotPremiumUsageMonitor.dangerAtPercent": {
          "type": "number",
          "default": 100,
          "minimum": 1,
          "maximum": 100,
          "description": "Danger color threshold (percent used)."
        },
        "copilotPremiumUsageMonitor.refreshIntervalMinutes": {
          "type": "number",
          "default": 15,
          "minimum": 5,
          "maximum": 1440,
          "description": "Auto-refresh interval in minutes for personal usage. Minimum 5 minutes."
        },
        "copilotPremiumUsageMonitor.mode": {
          "type": "string",
          "enum": [
            "auto",
            "personal",
            "org"
          ],
          "default": "auto",
          "description": "Data source mode: auto (Org if set, otherwise personal), personal (Enhanced Billing), or Org (Copilot metrics)."
        },
        "copilotPremiumUsageMonitor.budget": {
          "type": "number",
          "default": 10,
          "description": "Monthly budget in USD for Copilot Premium Request SKU. (Find value here: https://github.com/settings/billing/budgets)",
          "minimum": 0
        },
        "copilotPremiumUsageMonitor.org": {
          "type": "string",
          "default": "",
          "description": "GitHub Organization login (optional). Leave blank for personal account."
        },
        "copilotPremiumUsageMonitor.token": {
          "type": "string",
          "default": "",
          "markdownDescription": "GitHub Personal Access Token (classic or fine-grained) with `Plan: read-only` scope. Leave blank to sign in via the GitHub Authentication extension.",
          "scope": "machine-overridable"
        },
        "copilotPremiumUsageMonitor.disableFirstRunTips": {
          "type": "boolean",
          "default": false,
          "description": "Permanently disable the first-run tip banner in the panel."
        },
        "copilotPremiumUsageMonitor.statusBarAlignment": {
          "type": "string",
          "enum": [
            "left",
            "right"
          ],
          "default": "left",
          "description": "Status bar item alignment: left (near editor info) or right (near GitHub/Copilot icons)."
        },
        "copilotPremiumUsageMonitor.showLogOnError": {
          "type": "boolean",
          "default": false,
          "description": "Automatically open the extension log output channel the first time an error occurs in a session."
        },
        "copilotPremiumUsageMonitor.useThemeStatusColor": {
          "type": "boolean",
          "default": true,
          "description": "Use the theme's default status bar text color for normal state (improves contrast). Color is only applied for warning / danger thresholds or errors. Disable to always colorize by usage percent."
        },
        "copilotPremiumUsageMonitor.statusBarIconOverride": {
          "type": "string",
          "default": "",
          "markdownDescription": "Optional Codicon name (without $() ) to force a specific status bar icon when not in an error/stale state. Example: `graph`, `pulse`, `dashboard`, `repo`, `rocket`. Full list: https://microsoft.github.io/vscode-codicons/dist/codicon.html. Leave blank to use automatic account/organization and error icons.",
          "description": "Override status bar icon (Codicon name) when normal. Blank = automatic."
        }
      }
    }
  },
  "activationEvents": [
    "onStartupFinished"
  ],
  "scripts": {
    "vscode:prepublish": "tsc -p ./",
    "compile": "tsc -watch -p ./",
    "lint": "eslint src --ext .ts --cache --cache-location .eslintcache",
    "test": "npm run vscode:prepublish && node --test --test-reporter=spec out/test/unit/**/*.test.js && node ./out/test/runTests.js",
    "test:activation": "npm run vscode:prepublish && nyc --reporter=text --reporter=lcov node ./out/test/runTests.js",
    "pretest:coverage": "npm run vscode:prepublish",
    "test:unit": "node --test --test-reporter=spec out/test/unit/**/*.test.js",
    "test:coverage": "rimraf .nyc_output coverage && c8 --reporter=text --reporter=lcov node --test out/test/unit/**/*.test.js && node scripts/coverage-badge.mjs",
    "test:coverage:full": "rimraf .node_coverage coverage out-instrumented && npm run vscode:prepublish && cp out/extension.js out/extension.js.bak && npx nyc instrument out out-instrumented && cp out-instrumented/extension.js out/extension.js && CPUM_COVERAGE_DIR=.node_coverage c8 --reporter=text --reporter=lcov node --test out/test/unit/**/*.test.js && CPUM_COVERAGE_DIR=.node_coverage node ./out/test/runTests.js; RC=$?; mv out/extension.js.bak out/extension.js; rimraf out-instrumented; if [ $RC -ne 0 ]; then exit $RC; fi; c8 report --reporter=text --reporter=lcov --coverage-dir .node_coverage && node scripts/merge-extension-coverage.mjs .node_coverage && node scripts/coverage-badge.mjs",
  "clean": "bash scripts/clean-artifacts.sh",
  "clean:full": "bash scripts/clean-artifacts.sh && git clean -fdX || true",
    "vsce": "npx @vscode/vsce",
    "package": "npx @vscode/vsce package",
    "release": "npm run vscode:prepublish && npx @vscode/vsce publish"
  },
  "devDependencies": {
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.11.17",
    "@types/vscode": "^1.86.0",
    "@typescript-eslint/eslint-plugin": "^7.8.0",
    "@typescript-eslint/parser": "^7.8.0",
    "@vscode/test-electron": "^2.3.9",
    "@vscode/vsce": "^2.24.0",
    "c8": "^10.1.3",
    "esbuild": "^0.25.8",
    "eslint": "^8.57.0",
    "glob": "^10.3.10",
    "mocha": "^10.4.0",
    "nyc": "^15.1.0",
    "rimraf": "^5.0.7",
    "typescript": "^5.4.5"
  },
  "dependencies": {
    "@octokit/rest": "^22.0.0",
    "vscode-nls": "^5.2.0"
  },
  "nyc": {}
}